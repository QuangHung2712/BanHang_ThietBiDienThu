{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n/**\n * Vue Currency Input 3.2.1\n * (c) 2018-2025 Matthias Stiller\n * @license MIT\n */\nimport { ref, getCurrentInstance, version, computed, watch } from 'vue';\nvar CurrencyDisplay;\n(function (CurrencyDisplay) {\n  CurrencyDisplay[\"symbol\"] = \"symbol\";\n  CurrencyDisplay[\"narrowSymbol\"] = \"narrowSymbol\";\n  CurrencyDisplay[\"code\"] = \"code\";\n  CurrencyDisplay[\"name\"] = \"name\";\n  CurrencyDisplay[\"hidden\"] = \"hidden\";\n})(CurrencyDisplay || (CurrencyDisplay = {}));\nvar ValueScaling;\n(function (ValueScaling) {\n  ValueScaling[\"precision\"] = \"precision\";\n  ValueScaling[\"thousands\"] = \"thousands\";\n  ValueScaling[\"tenThousands\"] = \"tenThousands\";\n  ValueScaling[\"millions\"] = \"millions\";\n  ValueScaling[\"billions\"] = \"billions\";\n})(ValueScaling || (ValueScaling = {}));\nconst escapeRegExp = str => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst removeLeadingZeros = str => {\n  return str.replace(/^0+(0$|[^0])/, '$1');\n};\nconst count = (str, search) => {\n  return (str.match(new RegExp(escapeRegExp(search), 'g')) || []).length;\n};\nconst substringBefore = (str, search) => {\n  return str.substring(0, str.indexOf(search));\n};\nconst DECIMAL_SEPARATORS = [',', '.', '٫', '。'];\nconst INTEGER_PATTERN = '(0|[1-9]\\\\d*)';\nclass CurrencyFormat {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      currency,\n      currencyDisplay,\n      locale,\n      precision,\n      accountingSign,\n      useGrouping\n    } = options;\n    this.locale = locale;\n    this.options = {\n      currency,\n      useGrouping,\n      style: 'currency',\n      currencySign: accountingSign ? 'accounting' : undefined,\n      currencyDisplay: currencyDisplay !== CurrencyDisplay.hidden ? currencyDisplay : undefined\n    };\n    const numberFormat = new Intl.NumberFormat(locale, this.options);\n    const formatParts = numberFormat.formatToParts(123456);\n    this.currency = (_a = formatParts.find(({\n      type\n    }) => type === 'currency')) === null || _a === void 0 ? void 0 : _a.value;\n    this.digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => i.toLocaleString(locale));\n    this.decimalSymbol = (_b = formatParts.find(({\n      type\n    }) => type === 'decimal')) === null || _b === void 0 ? void 0 : _b.value;\n    this.groupingSymbol = (_c = formatParts.find(({\n      type\n    }) => type === 'group')) === null || _c === void 0 ? void 0 : _c.value;\n    this.minusSign = (_d = numberFormat.formatToParts(-1).find(({\n      type\n    }) => type === 'minusSign')) === null || _d === void 0 ? void 0 : _d.value;\n    if (this.decimalSymbol === undefined) {\n      this.minimumFractionDigits = this.maximumFractionDigits = 0;\n    } else if (typeof precision === 'number') {\n      this.minimumFractionDigits = this.maximumFractionDigits = precision;\n    } else {\n      this.minimumFractionDigits = (_e = precision === null || precision === void 0 ? void 0 : precision.min) !== null && _e !== void 0 ? _e : numberFormat.resolvedOptions().minimumFractionDigits;\n      this.maximumFractionDigits = (_f = precision === null || precision === void 0 ? void 0 : precision.max) !== null && _f !== void 0 ? _f : numberFormat.resolvedOptions().maximumFractionDigits;\n    }\n    const getPrefix = str => {\n      return substringBefore(str, this.digits[1]);\n    };\n    const getSuffix = str => {\n      return str.substring(str.lastIndexOf(this.decimalSymbol ? this.digits[0] : this.digits[1]) + 1);\n    };\n    this.prefix = getPrefix(numberFormat.format(1));\n    this.suffix = getSuffix(numberFormat.format(1));\n    this.negativePrefix = getPrefix(numberFormat.format(-1));\n    this.negativeSuffix = getSuffix(numberFormat.format(-1));\n  }\n  parse(str) {\n    if (str) {\n      const negative = this.isNegative(str);\n      str = this.normalizeDigits(str);\n      str = this.stripCurrency(str, negative);\n      str = this.stripSignLiterals(str);\n      const fraction = this.decimalSymbol ? `(?:${escapeRegExp(this.decimalSymbol)}(\\\\d*))?` : '';\n      const match = this.stripGroupingSeparator(str).match(new RegExp(`^${INTEGER_PATTERN}${fraction}$`));\n      if (match && this.isValidIntegerFormat(this.decimalSymbol ? str.split(this.decimalSymbol)[0] : str, Number(match[1]))) {\n        return Number(`${negative ? '-' : ''}${this.onlyDigits(match[1])}.${this.onlyDigits(match[2] || '')}`);\n      }\n    }\n    return null;\n  }\n  isValidIntegerFormat(formattedNumber, integerNumber) {\n    const options = {\n      ...this.options,\n      minimumFractionDigits: 0\n    };\n    return [this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, {\n      ...options,\n      useGrouping: true\n    })), false), this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, {\n      ...options,\n      useGrouping: false\n    })), false)].includes(formattedNumber);\n  }\n  format(value, options = {\n    minimumFractionDigits: this.minimumFractionDigits,\n    maximumFractionDigits: this.maximumFractionDigits\n  }) {\n    return value != null ? value.toLocaleString(this.locale, {\n      ...this.options,\n      ...options\n    }) : '';\n  }\n  toFraction(str) {\n    return `${this.digits[0]}${this.decimalSymbol}${this.onlyLocaleDigits(str.substring(1)).substring(0, this.maximumFractionDigits)}`;\n  }\n  isFractionIncomplete(str) {\n    return !!this.normalizeDigits(this.stripGroupingSeparator(str)).match(new RegExp(`^${INTEGER_PATTERN}${escapeRegExp(this.decimalSymbol)}$`));\n  }\n  isNegative(str) {\n    return str.startsWith(this.negativePrefix) || this.minusSign === undefined && (str.startsWith('(') || str.startsWith('-')) || this.minusSign !== undefined && str.replace('-', this.minusSign).startsWith(this.minusSign);\n  }\n  insertCurrency(str, negative) {\n    return `${negative ? this.negativePrefix : this.prefix}${str}${negative ? this.negativeSuffix : this.suffix}`;\n  }\n  stripGroupingSeparator(str) {\n    return this.groupingSymbol !== undefined ? str.replace(new RegExp(escapeRegExp(this.groupingSymbol), 'g'), '') : str;\n  }\n  stripSignLiterals(str) {\n    if (this.minusSign !== undefined) {\n      return str.replace('-', this.minusSign).replace(this.minusSign, '');\n    } else {\n      return str.replace(/[-()]/g, '');\n    }\n  }\n  stripCurrency(str, negative) {\n    return str.replace(negative ? this.negativePrefix : this.prefix, '').replace(negative ? this.negativeSuffix : this.suffix, '');\n  }\n  normalizeDecimalSeparator(str, from) {\n    DECIMAL_SEPARATORS.forEach(s => {\n      str = str.substring(0, from) + str.substring(from).replace(s, this.decimalSymbol);\n    });\n    return str;\n  }\n  normalizeDigits(str) {\n    if (this.digits[0] !== '0') {\n      this.digits.forEach((digit, index) => {\n        str = str.replace(new RegExp(digit, 'g'), String(index));\n      });\n    }\n    return str;\n  }\n  onlyDigits(str) {\n    return this.normalizeDigits(str).replace(/\\D+/g, '');\n  }\n  onlyLocaleDigits(str) {\n    return str.replace(new RegExp(`[^${this.digits.join('')}]*`, 'g'), '');\n  }\n}\nclass AbstractInputMask {\n  constructor(currencyFormat) {\n    this.currencyFormat = currencyFormat;\n  }\n}\nclass DefaultInputMask extends AbstractInputMask {\n  conformToMask(str, previousConformedValue = '') {\n    const negative = this.currencyFormat.isNegative(str);\n    const isEmptyNegativeValue = str => str === '' && negative && !(this.currencyFormat.minusSign === undefined ? previousConformedValue === this.currencyFormat.negativePrefix + this.currencyFormat.negativeSuffix : previousConformedValue === this.currencyFormat.negativePrefix);\n    const checkIncompleteValue = str => {\n      if (isEmptyNegativeValue(str)) {\n        return '';\n      } else if (this.currencyFormat.maximumFractionDigits > 0) {\n        if (this.currencyFormat.isFractionIncomplete(str)) {\n          return str;\n        } else if (str.startsWith(this.currencyFormat.decimalSymbol)) {\n          return this.currencyFormat.toFraction(str);\n        }\n      }\n      return null;\n    };\n    let value = str;\n    value = this.currencyFormat.stripCurrency(value, negative);\n    value = this.currencyFormat.stripSignLiterals(value);\n    const incompleteValue = checkIncompleteValue(value);\n    if (incompleteValue != null) {\n      return this.currencyFormat.insertCurrency(incompleteValue, negative);\n    }\n    const [integer, ...fraction] = value.split(this.currencyFormat.decimalSymbol);\n    const integerDigits = removeLeadingZeros(this.currencyFormat.onlyDigits(integer));\n    const fractionDigits = this.currencyFormat.onlyDigits(fraction.join('')).substring(0, this.currencyFormat.maximumFractionDigits);\n    const invalidFraction = fraction.length > 0 && fractionDigits.length === 0;\n    const invalidNegativeValue = integerDigits === '' && negative && (this.currencyFormat.minusSign === undefined ? previousConformedValue === str.slice(0, -2) + this.currencyFormat.negativeSuffix : previousConformedValue === str.slice(0, -1));\n    if (invalidFraction || invalidNegativeValue || isEmptyNegativeValue(integerDigits)) {\n      return previousConformedValue;\n    } else if (integerDigits.match(/\\d+/)) {\n      return {\n        numberValue: Number(`${negative ? '-' : ''}${integerDigits}.${fractionDigits}`),\n        fractionDigits\n      };\n    } else {\n      return '';\n    }\n  }\n}\nclass AutoDecimalDigitsInputMask extends AbstractInputMask {\n  conformToMask(str, previousConformedValue = '') {\n    if (str === '' || this.currencyFormat.parse(previousConformedValue) === 0 && this.currencyFormat.stripCurrency(previousConformedValue, true).slice(0, -1) === this.currencyFormat.stripCurrency(str, true)) {\n      return '';\n    }\n    const negative = this.currencyFormat.isNegative(str);\n    const numberValue = this.currencyFormat.stripSignLiterals(str) === '' ? -0 : Number(`${negative ? '-' : ''}${removeLeadingZeros(this.currencyFormat.onlyDigits(str))}`) / Math.pow(10, this.currencyFormat.maximumFractionDigits);\n    return {\n      numberValue,\n      fractionDigits: numberValue.toFixed(this.currencyFormat.maximumFractionDigits).slice(-this.currencyFormat.maximumFractionDigits)\n    };\n  }\n}\nconst DEFAULT_OPTIONS = {\n  locale: undefined,\n  currency: undefined,\n  currencyDisplay: undefined,\n  hideGroupingSeparatorOnFocus: true,\n  hideCurrencySymbolOnFocus: true,\n  hideNegligibleDecimalDigitsOnFocus: true,\n  precision: undefined,\n  autoDecimalDigits: false,\n  valueRange: undefined,\n  useGrouping: undefined,\n  valueScaling: undefined\n};\nclass CurrencyInput {\n  constructor(args) {\n    this.el = args.el;\n    this.onInput = args.onInput;\n    this.onChange = args.onChange;\n    this.addEventListener();\n    this.init(args.options);\n  }\n  setOptions(options) {\n    this.init(options);\n    this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\n    this.onChange(this.getValue());\n  }\n  getValue() {\n    const numberValue = this.valueScaling && this.numberValue != null ? this.toInteger(this.numberValue, this.valueScaling) : this.numberValue;\n    return {\n      number: numberValue,\n      formatted: this.formattedValue\n    };\n  }\n  setValue(value) {\n    const newValue = this.valueScaling !== undefined && value != null ? this.toFloat(value, this.valueScaling) : value;\n    if (newValue !== this.numberValue) {\n      this.format(this.currencyFormat.format(this.validateValueRange(newValue)));\n      this.onChange(this.getValue());\n    }\n  }\n  init(options) {\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options\n    };\n    if (this.options.autoDecimalDigits) {\n      this.options.hideNegligibleDecimalDigitsOnFocus = false;\n    }\n    if (!this.el.getAttribute('inputmode')) {\n      this.el.setAttribute('inputmode', this.options.autoDecimalDigits ? 'numeric' : 'decimal');\n    }\n    this.currencyFormat = new CurrencyFormat(this.options);\n    this.numberMask = this.options.autoDecimalDigits ? new AutoDecimalDigitsInputMask(this.currencyFormat) : new DefaultInputMask(this.currencyFormat);\n    const valueScalingOptions = {\n      [ValueScaling.precision]: this.currencyFormat.maximumFractionDigits,\n      [ValueScaling.thousands]: 3,\n      [ValueScaling.tenThousands]: 4,\n      [ValueScaling.millions]: 6,\n      [ValueScaling.billions]: 9\n    };\n    this.valueScaling = this.options.valueScaling ? valueScalingOptions[this.options.valueScaling] : undefined;\n    this.valueScalingFractionDigits = this.valueScaling !== undefined && this.options.valueScaling !== ValueScaling.precision ? this.valueScaling + this.currencyFormat.maximumFractionDigits : this.currencyFormat.maximumFractionDigits;\n    this.minValue = this.getMinValue();\n    this.maxValue = this.getMaxValue();\n  }\n  getMinValue() {\n    var _a, _b;\n    let min = this.toFloat(-Number.MAX_SAFE_INTEGER);\n    if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.min) !== undefined) {\n      min = Math.max((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.min, this.toFloat(-Number.MAX_SAFE_INTEGER));\n    }\n    return min;\n  }\n  getMaxValue() {\n    var _a, _b;\n    let max = this.toFloat(Number.MAX_SAFE_INTEGER);\n    if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.max) !== undefined) {\n      max = Math.min((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.max, this.toFloat(Number.MAX_SAFE_INTEGER));\n    }\n    return max;\n  }\n  toFloat(value, maxFractionDigits) {\n    return value / Math.pow(10, maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits);\n  }\n  toInteger(value, maxFractionDigits) {\n    return Number(value.toFixed(maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits).split('.').join(''));\n  }\n  validateValueRange(value) {\n    return value != null ? Math.min(Math.max(value, this.minValue), this.maxValue) : value;\n  }\n  format(value, hideNegligibleDecimalDigits = false) {\n    if (value != null) {\n      if (this.decimalSymbolInsertedAt !== undefined) {\n        value = this.currencyFormat.normalizeDecimalSeparator(value, this.decimalSymbolInsertedAt);\n        this.decimalSymbolInsertedAt = undefined;\n      }\n      const conformedValue = this.numberMask.conformToMask(value, this.formattedValue);\n      let formattedValue;\n      if (typeof conformedValue === 'object') {\n        const {\n          numberValue,\n          fractionDigits\n        } = conformedValue;\n        let {\n          maximumFractionDigits,\n          minimumFractionDigits\n        } = this.currencyFormat;\n        if (this.focus) {\n          minimumFractionDigits = hideNegligibleDecimalDigits ? fractionDigits.replace(/0+$/, '').length : Math.min(maximumFractionDigits, fractionDigits.length);\n        } else if (Number.isInteger(numberValue) && !this.options.autoDecimalDigits && (this.options.precision === undefined || minimumFractionDigits === 0)) {\n          minimumFractionDigits = maximumFractionDigits = 0;\n        }\n        formattedValue = this.toInteger(Math.abs(numberValue)) > Number.MAX_SAFE_INTEGER ? this.formattedValue : this.currencyFormat.format(numberValue, {\n          useGrouping: this.options.useGrouping !== false && !(this.focus && this.options.hideGroupingSeparatorOnFocus),\n          minimumFractionDigits,\n          maximumFractionDigits\n        });\n      } else {\n        formattedValue = conformedValue;\n      }\n      if (this.maxValue <= 0 && !this.currencyFormat.isNegative(formattedValue) && this.currencyFormat.parse(formattedValue) !== 0) {\n        formattedValue = formattedValue.replace(this.currencyFormat.prefix, this.currencyFormat.negativePrefix);\n      }\n      if (this.minValue >= 0) {\n        formattedValue = formattedValue.replace(this.currencyFormat.negativePrefix, this.currencyFormat.prefix);\n      }\n      if (this.options.currencyDisplay === CurrencyDisplay.hidden || this.focus && this.options.hideCurrencySymbolOnFocus) {\n        formattedValue = formattedValue.replace(this.currencyFormat.negativePrefix, this.currencyFormat.minusSign !== undefined ? this.currencyFormat.minusSign : '(').replace(this.currencyFormat.negativeSuffix, this.currencyFormat.minusSign !== undefined ? '' : ')').replace(this.currencyFormat.prefix, '').replace(this.currencyFormat.suffix, '');\n      }\n      this.el.value = formattedValue;\n      this.numberValue = this.currencyFormat.parse(formattedValue);\n    } else {\n      this.el.value = '';\n      this.numberValue = null;\n    }\n    this.formattedValue = this.el.value;\n    this.onInput(this.getValue());\n  }\n  addEventListener() {\n    this.el.addEventListener('input', e => {\n      const {\n        value,\n        selectionStart\n      } = this.el;\n      const inputEvent = e;\n      if (selectionStart && inputEvent.data && DECIMAL_SEPARATORS.includes(inputEvent.data)) {\n        this.decimalSymbolInsertedAt = selectionStart - 1;\n      }\n      this.format(value);\n      if (this.focus && selectionStart != null) {\n        const getCaretPositionAfterFormat = () => {\n          const {\n            prefix,\n            suffix,\n            decimalSymbol,\n            maximumFractionDigits,\n            groupingSymbol\n          } = this.currencyFormat;\n          let caretPositionFromLeft = value.length - selectionStart;\n          const newValueLength = this.formattedValue.length;\n          if (this.currencyFormat.minusSign === undefined && (value.startsWith('(') || value.startsWith('-')) && !value.endsWith(')')) {\n            return newValueLength - this.currencyFormat.negativeSuffix.length > 1 ? this.formattedValue.substring(selectionStart).length : 1;\n          }\n          if (this.formattedValue.substring(selectionStart, 1) === groupingSymbol && count(this.formattedValue, groupingSymbol) === count(value, groupingSymbol) + 1) {\n            return newValueLength - caretPositionFromLeft - 1;\n          }\n          if (newValueLength < caretPositionFromLeft) {\n            return selectionStart;\n          }\n          if (decimalSymbol !== undefined && value.indexOf(decimalSymbol) !== -1) {\n            const decimalSymbolPosition = value.indexOf(decimalSymbol) + 1;\n            if (Math.abs(newValueLength - value.length) > 1 && selectionStart <= decimalSymbolPosition) {\n              return this.formattedValue.indexOf(decimalSymbol) + 1;\n            } else {\n              if (!this.options.autoDecimalDigits && selectionStart > decimalSymbolPosition) {\n                if (this.currencyFormat.onlyDigits(value.substring(decimalSymbolPosition)).length - 1 === maximumFractionDigits) {\n                  caretPositionFromLeft -= 1;\n                }\n              }\n            }\n          }\n          return this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden ? newValueLength - caretPositionFromLeft : Math.max(newValueLength - Math.max(caretPositionFromLeft, suffix.length), prefix.length);\n        };\n        this.setCaretPosition(getCaretPositionAfterFormat());\n      }\n    });\n    this.el.addEventListener('focus', () => {\n      this.focus = true;\n      this.numberValueOnFocus = this.numberValue;\n      setTimeout(() => {\n        const {\n          value,\n          selectionStart,\n          selectionEnd\n        } = this.el;\n        this.format(value, this.options.hideNegligibleDecimalDigitsOnFocus);\n        if (selectionStart != null && selectionEnd != null && Math.abs(selectionStart - selectionEnd) > 0) {\n          this.setCaretPosition(0, this.el.value.length);\n        } else if (selectionStart != null) {\n          const caretPositionOnFocus = this.getCaretPositionOnFocus(value, selectionStart);\n          this.setCaretPosition(caretPositionOnFocus);\n        }\n      });\n    });\n    this.el.addEventListener('blur', () => {\n      this.focus = false;\n      this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\n      if (this.numberValueOnFocus !== this.numberValue) {\n        this.onChange(this.getValue());\n      }\n    });\n  }\n  getCaretPositionOnFocus(value, selectionStart) {\n    if (this.numberValue == null) {\n      return selectionStart;\n    }\n    const {\n      prefix,\n      negativePrefix,\n      suffix,\n      negativeSuffix,\n      groupingSymbol,\n      currency\n    } = this.currencyFormat;\n    const isNegative = this.numberValue < 0;\n    const currentPrefix = isNegative ? negativePrefix : prefix;\n    const prefixLength = currentPrefix.length;\n    if (this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden) {\n      if (isNegative) {\n        if (selectionStart <= 1) {\n          return 1;\n        } else if (value.endsWith(')') && selectionStart > value.indexOf(')')) {\n          return this.formattedValue.length - 1;\n        }\n      }\n    } else {\n      const suffixLength = isNegative ? negativeSuffix.length : suffix.length;\n      if (selectionStart >= value.length - suffixLength) {\n        return this.formattedValue.length - suffixLength;\n      } else if (selectionStart < prefixLength) {\n        return prefixLength;\n      }\n    }\n    let result = selectionStart;\n    if (this.options.hideCurrencySymbolOnFocus && this.options.currencyDisplay !== CurrencyDisplay.hidden && selectionStart >= prefixLength && currency !== undefined && currentPrefix.includes(currency)) {\n      result -= prefixLength;\n      if (isNegative) {\n        result += 1;\n      }\n    }\n    if (this.options.hideGroupingSeparatorOnFocus && groupingSymbol !== undefined) {\n      result -= count(value.substring(0, selectionStart), groupingSymbol);\n    }\n    return result;\n  }\n  setCaretPosition(start, end = start) {\n    this.el.setSelectionRange(start, end);\n  }\n}\nconst findInput = el => (el === null || el === void 0 ? void 0 : el.matches('input')) ? el : el === null || el === void 0 ? void 0 : el.querySelector('input');\nfunction useCurrencyInput(options, autoEmit) {\n  var _a, _b, _c, _d;\n  let currencyInput;\n  const inputRef = ref(null);\n  const formattedValue = ref(null);\n  const numberValue = ref(null);\n  const vm = getCurrentInstance();\n  const emit = (vm === null || vm === void 0 ? void 0 : vm.emit) || ((_b = (_a = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _a === void 0 ? void 0 : _a.$emit) === null || _b === void 0 ? void 0 : _b.bind(vm === null || vm === void 0 ? void 0 : vm.proxy));\n  const props = (vm === null || vm === void 0 ? void 0 : vm.props) || ((_c = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _c === void 0 ? void 0 : _c.$props);\n  const isVue3 = version.startsWith('3');\n  const lazyModel = isVue3 && ((_d = vm === null || vm === void 0 ? void 0 : vm.attrs.modelModifiers) === null || _d === void 0 ? void 0 : _d.lazy);\n  const modelValue = computed(() => props === null || props === void 0 ? void 0 : props[isVue3 ? 'modelValue' : 'value']);\n  const inputEvent = isVue3 ? 'update:modelValue' : 'input';\n  const changeEvent = lazyModel ? 'update:modelValue' : 'change';\n  watch(inputRef, value => {\n    var _a;\n    if (value) {\n      const el = findInput((_a = value === null || value === void 0 ? void 0 : value.$el) !== null && _a !== void 0 ? _a : value);\n      if (el) {\n        currencyInput = new CurrencyInput({\n          el,\n          options,\n          onInput: value => {\n            if (!lazyModel && autoEmit !== false && modelValue.value !== value.number) {\n              emit === null || emit === void 0 ? void 0 : emit(inputEvent, value.number);\n            }\n            numberValue.value = value.number;\n            formattedValue.value = value.formatted;\n          },\n          onChange: value => {\n            if (autoEmit !== false) {\n              emit === null || emit === void 0 ? void 0 : emit(changeEvent, value.number);\n            }\n          }\n        });\n        currencyInput.setValue(modelValue.value);\n      } else {\n        console.error('No input element found. Please make sure that the \"inputRef\" template ref is properly assigned.');\n      }\n    } else {\n      currencyInput = null;\n    }\n  });\n  return {\n    inputRef,\n    numberValue,\n    formattedValue,\n    setValue: value => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setValue(value),\n    setOptions: options => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setOptions(options)\n  };\n}\nexport { CurrencyDisplay, ValueScaling, useCurrencyInput };","map":{"version":3,"names":["ref","getCurrentInstance","version","computed","watch","CurrencyDisplay","ValueScaling","escapeRegExp","str","replace","removeLeadingZeros","count","search","match","RegExp","length","substringBefore","substring","indexOf","DECIMAL_SEPARATORS","INTEGER_PATTERN","CurrencyFormat","constructor","options","_a","_b","_c","_d","_e","_f","currency","currencyDisplay","locale","precision","accountingSign","useGrouping","style","currencySign","undefined","hidden","numberFormat","Intl","NumberFormat","formatParts","formatToParts","find","type","value","digits","map","i","toLocaleString","decimalSymbol","groupingSymbol","minusSign","minimumFractionDigits","maximumFractionDigits","min","resolvedOptions","max","getPrefix","getSuffix","lastIndexOf","prefix","format","suffix","negativePrefix","negativeSuffix","parse","negative","isNegative","normalizeDigits","stripCurrency","stripSignLiterals","fraction","stripGroupingSeparator","isValidIntegerFormat","split","Number","onlyDigits","formattedNumber","integerNumber","includes","toFraction","onlyLocaleDigits","isFractionIncomplete","startsWith","insertCurrency","normalizeDecimalSeparator","from","forEach","s","digit","index","String","join","AbstractInputMask","currencyFormat","DefaultInputMask","conformToMask","previousConformedValue","isEmptyNegativeValue","checkIncompleteValue","incompleteValue","integer","integerDigits","fractionDigits","invalidFraction","invalidNegativeValue","slice","numberValue","AutoDecimalDigitsInputMask","Math","pow","toFixed","DEFAULT_OPTIONS","hideGroupingSeparatorOnFocus","hideCurrencySymbolOnFocus","hideNegligibleDecimalDigitsOnFocus","autoDecimalDigits","valueRange","valueScaling","CurrencyInput","args","el","onInput","onChange","addEventListener","init","setOptions","validateValueRange","getValue","toInteger","number","formatted","formattedValue","setValue","newValue","toFloat","getAttribute","setAttribute","numberMask","valueScalingOptions","thousands","tenThousands","millions","billions","valueScalingFractionDigits","minValue","getMinValue","maxValue","getMaxValue","MAX_SAFE_INTEGER","maxFractionDigits","hideNegligibleDecimalDigits","decimalSymbolInsertedAt","conformedValue","focus","isInteger","abs","e","selectionStart","inputEvent","data","getCaretPositionAfterFormat","caretPositionFromLeft","newValueLength","endsWith","decimalSymbolPosition","setCaretPosition","numberValueOnFocus","setTimeout","selectionEnd","caretPositionOnFocus","getCaretPositionOnFocus","currentPrefix","prefixLength","suffixLength","result","start","end","setSelectionRange","findInput","matches","querySelector","useCurrencyInput","autoEmit","currencyInput","inputRef","vm","emit","proxy","$emit","bind","props","$props","isVue3","lazyModel","attrs","modelModifiers","lazy","modelValue","changeEvent","$el","console","error"],"sources":["D:/Du_An/BanHang_ThietBiDienThu/QLBH_Application/node_modules/vue-currency-input/dist/index.mjs"],"sourcesContent":["/**\n * Vue Currency Input 3.2.1\n * (c) 2018-2025 Matthias Stiller\n * @license MIT\n */\nimport { ref, getCurrentInstance, version, computed, watch } from 'vue';\n\nvar CurrencyDisplay;\n(function (CurrencyDisplay) {\n    CurrencyDisplay[\"symbol\"] = \"symbol\";\n    CurrencyDisplay[\"narrowSymbol\"] = \"narrowSymbol\";\n    CurrencyDisplay[\"code\"] = \"code\";\n    CurrencyDisplay[\"name\"] = \"name\";\n    CurrencyDisplay[\"hidden\"] = \"hidden\";\n})(CurrencyDisplay || (CurrencyDisplay = {}));\nvar ValueScaling;\n(function (ValueScaling) {\n    ValueScaling[\"precision\"] = \"precision\";\n    ValueScaling[\"thousands\"] = \"thousands\";\n    ValueScaling[\"tenThousands\"] = \"tenThousands\";\n    ValueScaling[\"millions\"] = \"millions\";\n    ValueScaling[\"billions\"] = \"billions\";\n})(ValueScaling || (ValueScaling = {}));\n\nconst escapeRegExp = (str) => {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst removeLeadingZeros = (str) => {\n    return str.replace(/^0+(0$|[^0])/, '$1');\n};\nconst count = (str, search) => {\n    return (str.match(new RegExp(escapeRegExp(search), 'g')) || []).length;\n};\nconst substringBefore = (str, search) => {\n    return str.substring(0, str.indexOf(search));\n};\n\nconst DECIMAL_SEPARATORS = [\n    ',',\n    '.',\n    '٫',\n    '。'\n];\nconst INTEGER_PATTERN = '(0|[1-9]\\\\d*)';\nclass CurrencyFormat {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        const { currency, currencyDisplay, locale, precision, accountingSign, useGrouping } = options;\n        this.locale = locale;\n        this.options = {\n            currency,\n            useGrouping,\n            style: 'currency',\n            currencySign: accountingSign ? 'accounting' : undefined,\n            currencyDisplay: currencyDisplay !== CurrencyDisplay.hidden ? currencyDisplay : undefined\n        };\n        const numberFormat = new Intl.NumberFormat(locale, this.options);\n        const formatParts = numberFormat.formatToParts(123456);\n        this.currency = (_a = formatParts.find(({ type }) => type === 'currency')) === null || _a === void 0 ? void 0 : _a.value;\n        this.digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((i) => i.toLocaleString(locale));\n        this.decimalSymbol = (_b = formatParts.find(({ type }) => type === 'decimal')) === null || _b === void 0 ? void 0 : _b.value;\n        this.groupingSymbol = (_c = formatParts.find(({ type }) => type === 'group')) === null || _c === void 0 ? void 0 : _c.value;\n        this.minusSign = (_d = numberFormat.formatToParts(-1).find(({ type }) => type === 'minusSign')) === null || _d === void 0 ? void 0 : _d.value;\n        if (this.decimalSymbol === undefined) {\n            this.minimumFractionDigits = this.maximumFractionDigits = 0;\n        }\n        else if (typeof precision === 'number') {\n            this.minimumFractionDigits = this.maximumFractionDigits = precision;\n        }\n        else {\n            this.minimumFractionDigits = (_e = precision === null || precision === void 0 ? void 0 : precision.min) !== null && _e !== void 0 ? _e : numberFormat.resolvedOptions().minimumFractionDigits;\n            this.maximumFractionDigits = (_f = precision === null || precision === void 0 ? void 0 : precision.max) !== null && _f !== void 0 ? _f : numberFormat.resolvedOptions().maximumFractionDigits;\n        }\n        const getPrefix = (str) => {\n            return substringBefore(str, this.digits[1]);\n        };\n        const getSuffix = (str) => {\n            return str.substring(str.lastIndexOf(this.decimalSymbol ? this.digits[0] : this.digits[1]) + 1);\n        };\n        this.prefix = getPrefix(numberFormat.format(1));\n        this.suffix = getSuffix(numberFormat.format(1));\n        this.negativePrefix = getPrefix(numberFormat.format(-1));\n        this.negativeSuffix = getSuffix(numberFormat.format(-1));\n    }\n    parse(str) {\n        if (str) {\n            const negative = this.isNegative(str);\n            str = this.normalizeDigits(str);\n            str = this.stripCurrency(str, negative);\n            str = this.stripSignLiterals(str);\n            const fraction = this.decimalSymbol ? `(?:${escapeRegExp(this.decimalSymbol)}(\\\\d*))?` : '';\n            const match = this.stripGroupingSeparator(str).match(new RegExp(`^${INTEGER_PATTERN}${fraction}$`));\n            if (match && this.isValidIntegerFormat(this.decimalSymbol ? str.split(this.decimalSymbol)[0] : str, Number(match[1]))) {\n                return Number(`${negative ? '-' : ''}${this.onlyDigits(match[1])}.${this.onlyDigits(match[2] || '')}`);\n            }\n        }\n        return null;\n    }\n    isValidIntegerFormat(formattedNumber, integerNumber) {\n        const options = { ...this.options, minimumFractionDigits: 0 };\n        return [\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: true })), false),\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: false })), false)\n        ].includes(formattedNumber);\n    }\n    format(value, options = {\n        minimumFractionDigits: this.minimumFractionDigits,\n        maximumFractionDigits: this.maximumFractionDigits\n    }) {\n        return value != null ? value.toLocaleString(this.locale, { ...this.options, ...options }) : '';\n    }\n    toFraction(str) {\n        return `${this.digits[0]}${this.decimalSymbol}${this.onlyLocaleDigits(str.substring(1)).substring(0, this.maximumFractionDigits)}`;\n    }\n    isFractionIncomplete(str) {\n        return !!this.normalizeDigits(this.stripGroupingSeparator(str)).match(new RegExp(`^${INTEGER_PATTERN}${escapeRegExp(this.decimalSymbol)}$`));\n    }\n    isNegative(str) {\n        return (str.startsWith(this.negativePrefix) ||\n            (this.minusSign === undefined && (str.startsWith('(') || str.startsWith('-'))) ||\n            (this.minusSign !== undefined && str.replace('-', this.minusSign).startsWith(this.minusSign)));\n    }\n    insertCurrency(str, negative) {\n        return `${negative ? this.negativePrefix : this.prefix}${str}${negative ? this.negativeSuffix : this.suffix}`;\n    }\n    stripGroupingSeparator(str) {\n        return this.groupingSymbol !== undefined ? str.replace(new RegExp(escapeRegExp(this.groupingSymbol), 'g'), '') : str;\n    }\n    stripSignLiterals(str) {\n        if (this.minusSign !== undefined) {\n            return str.replace('-', this.minusSign).replace(this.minusSign, '');\n        }\n        else {\n            return str.replace(/[-()]/g, '');\n        }\n    }\n    stripCurrency(str, negative) {\n        return str.replace(negative ? this.negativePrefix : this.prefix, '').replace(negative ? this.negativeSuffix : this.suffix, '');\n    }\n    normalizeDecimalSeparator(str, from) {\n        DECIMAL_SEPARATORS.forEach((s) => {\n            str = str.substring(0, from) + str.substring(from).replace(s, this.decimalSymbol);\n        });\n        return str;\n    }\n    normalizeDigits(str) {\n        if (this.digits[0] !== '0') {\n            this.digits.forEach((digit, index) => {\n                str = str.replace(new RegExp(digit, 'g'), String(index));\n            });\n        }\n        return str;\n    }\n    onlyDigits(str) {\n        return this.normalizeDigits(str).replace(/\\D+/g, '');\n    }\n    onlyLocaleDigits(str) {\n        return str.replace(new RegExp(`[^${this.digits.join('')}]*`, 'g'), '');\n    }\n}\n\nclass AbstractInputMask {\n    constructor(currencyFormat) {\n        this.currencyFormat = currencyFormat;\n    }\n}\nclass DefaultInputMask extends AbstractInputMask {\n    conformToMask(str, previousConformedValue = '') {\n        const negative = this.currencyFormat.isNegative(str);\n        const isEmptyNegativeValue = (str) => str === '' &&\n            negative &&\n            !(this.currencyFormat.minusSign === undefined\n                ? previousConformedValue === this.currencyFormat.negativePrefix + this.currencyFormat.negativeSuffix\n                : previousConformedValue === this.currencyFormat.negativePrefix);\n        const checkIncompleteValue = (str) => {\n            if (isEmptyNegativeValue(str)) {\n                return '';\n            }\n            else if (this.currencyFormat.maximumFractionDigits > 0) {\n                if (this.currencyFormat.isFractionIncomplete(str)) {\n                    return str;\n                }\n                else if (str.startsWith(this.currencyFormat.decimalSymbol)) {\n                    return this.currencyFormat.toFraction(str);\n                }\n            }\n            return null;\n        };\n        let value = str;\n        value = this.currencyFormat.stripCurrency(value, negative);\n        value = this.currencyFormat.stripSignLiterals(value);\n        const incompleteValue = checkIncompleteValue(value);\n        if (incompleteValue != null) {\n            return this.currencyFormat.insertCurrency(incompleteValue, negative);\n        }\n        const [integer, ...fraction] = value.split(this.currencyFormat.decimalSymbol);\n        const integerDigits = removeLeadingZeros(this.currencyFormat.onlyDigits(integer));\n        const fractionDigits = this.currencyFormat.onlyDigits(fraction.join('')).substring(0, this.currencyFormat.maximumFractionDigits);\n        const invalidFraction = fraction.length > 0 && fractionDigits.length === 0;\n        const invalidNegativeValue = integerDigits === '' &&\n            negative &&\n            (this.currencyFormat.minusSign === undefined\n                ? previousConformedValue === str.slice(0, -2) + this.currencyFormat.negativeSuffix\n                : previousConformedValue === str.slice(0, -1));\n        if (invalidFraction || invalidNegativeValue || isEmptyNegativeValue(integerDigits)) {\n            return previousConformedValue;\n        }\n        else if (integerDigits.match(/\\d+/)) {\n            return {\n                numberValue: Number(`${negative ? '-' : ''}${integerDigits}.${fractionDigits}`),\n                fractionDigits\n            };\n        }\n        else {\n            return '';\n        }\n    }\n}\nclass AutoDecimalDigitsInputMask extends AbstractInputMask {\n    conformToMask(str, previousConformedValue = '') {\n        if (str === '' ||\n            (this.currencyFormat.parse(previousConformedValue) === 0 &&\n                this.currencyFormat.stripCurrency(previousConformedValue, true).slice(0, -1) === this.currencyFormat.stripCurrency(str, true))) {\n            return '';\n        }\n        const negative = this.currencyFormat.isNegative(str);\n        const numberValue = this.currencyFormat.stripSignLiterals(str) === ''\n            ? -0\n            : Number(`${negative ? '-' : ''}${removeLeadingZeros(this.currencyFormat.onlyDigits(str))}`) / Math.pow(10, this.currencyFormat.maximumFractionDigits);\n        return {\n            numberValue,\n            fractionDigits: numberValue.toFixed(this.currencyFormat.maximumFractionDigits).slice(-this.currencyFormat.maximumFractionDigits)\n        };\n    }\n}\n\nconst DEFAULT_OPTIONS = {\n    locale: undefined,\n    currency: undefined,\n    currencyDisplay: undefined,\n    hideGroupingSeparatorOnFocus: true,\n    hideCurrencySymbolOnFocus: true,\n    hideNegligibleDecimalDigitsOnFocus: true,\n    precision: undefined,\n    autoDecimalDigits: false,\n    valueRange: undefined,\n    useGrouping: undefined,\n    valueScaling: undefined\n};\nclass CurrencyInput {\n    constructor(args) {\n        this.el = args.el;\n        this.onInput = args.onInput;\n        this.onChange = args.onChange;\n        this.addEventListener();\n        this.init(args.options);\n    }\n    setOptions(options) {\n        this.init(options);\n        this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\n        this.onChange(this.getValue());\n    }\n    getValue() {\n        const numberValue = this.valueScaling && this.numberValue != null ? this.toInteger(this.numberValue, this.valueScaling) : this.numberValue;\n        return { number: numberValue, formatted: this.formattedValue };\n    }\n    setValue(value) {\n        const newValue = this.valueScaling !== undefined && value != null ? this.toFloat(value, this.valueScaling) : value;\n        if (newValue !== this.numberValue) {\n            this.format(this.currencyFormat.format(this.validateValueRange(newValue)));\n            this.onChange(this.getValue());\n        }\n    }\n    init(options) {\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options\n        };\n        if (this.options.autoDecimalDigits) {\n            this.options.hideNegligibleDecimalDigitsOnFocus = false;\n        }\n        if (!this.el.getAttribute('inputmode')) {\n            this.el.setAttribute('inputmode', this.options.autoDecimalDigits ? 'numeric' : 'decimal');\n        }\n        this.currencyFormat = new CurrencyFormat(this.options);\n        this.numberMask = this.options.autoDecimalDigits ? new AutoDecimalDigitsInputMask(this.currencyFormat) : new DefaultInputMask(this.currencyFormat);\n        const valueScalingOptions = {\n            [ValueScaling.precision]: this.currencyFormat.maximumFractionDigits,\n            [ValueScaling.thousands]: 3,\n            [ValueScaling.tenThousands]: 4,\n            [ValueScaling.millions]: 6,\n            [ValueScaling.billions]: 9\n        };\n        this.valueScaling = this.options.valueScaling ? valueScalingOptions[this.options.valueScaling] : undefined;\n        this.valueScalingFractionDigits =\n            this.valueScaling !== undefined && this.options.valueScaling !== ValueScaling.precision\n                ? this.valueScaling + this.currencyFormat.maximumFractionDigits\n                : this.currencyFormat.maximumFractionDigits;\n        this.minValue = this.getMinValue();\n        this.maxValue = this.getMaxValue();\n    }\n    getMinValue() {\n        var _a, _b;\n        let min = this.toFloat(-Number.MAX_SAFE_INTEGER);\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.min) !== undefined) {\n            min = Math.max((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.min, this.toFloat(-Number.MAX_SAFE_INTEGER));\n        }\n        return min;\n    }\n    getMaxValue() {\n        var _a, _b;\n        let max = this.toFloat(Number.MAX_SAFE_INTEGER);\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.max) !== undefined) {\n            max = Math.min((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.max, this.toFloat(Number.MAX_SAFE_INTEGER));\n        }\n        return max;\n    }\n    toFloat(value, maxFractionDigits) {\n        return value / Math.pow(10, maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits);\n    }\n    toInteger(value, maxFractionDigits) {\n        return Number(value\n            .toFixed(maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits)\n            .split('.')\n            .join(''));\n    }\n    validateValueRange(value) {\n        return value != null ? Math.min(Math.max(value, this.minValue), this.maxValue) : value;\n    }\n    format(value, hideNegligibleDecimalDigits = false) {\n        if (value != null) {\n            if (this.decimalSymbolInsertedAt !== undefined) {\n                value = this.currencyFormat.normalizeDecimalSeparator(value, this.decimalSymbolInsertedAt);\n                this.decimalSymbolInsertedAt = undefined;\n            }\n            const conformedValue = this.numberMask.conformToMask(value, this.formattedValue);\n            let formattedValue;\n            if (typeof conformedValue === 'object') {\n                const { numberValue, fractionDigits } = conformedValue;\n                let { maximumFractionDigits, minimumFractionDigits } = this.currencyFormat;\n                if (this.focus) {\n                    minimumFractionDigits = hideNegligibleDecimalDigits\n                        ? fractionDigits.replace(/0+$/, '').length\n                        : Math.min(maximumFractionDigits, fractionDigits.length);\n                }\n                else if (Number.isInteger(numberValue) && !this.options.autoDecimalDigits && (this.options.precision === undefined || minimumFractionDigits === 0)) {\n                    minimumFractionDigits = maximumFractionDigits = 0;\n                }\n                formattedValue =\n                    this.toInteger(Math.abs(numberValue)) > Number.MAX_SAFE_INTEGER\n                        ? this.formattedValue\n                        : this.currencyFormat.format(numberValue, {\n                            useGrouping: this.options.useGrouping !== false && !(this.focus && this.options.hideGroupingSeparatorOnFocus),\n                            minimumFractionDigits,\n                            maximumFractionDigits\n                        });\n            }\n            else {\n                formattedValue = conformedValue;\n            }\n            if (this.maxValue <= 0 && !this.currencyFormat.isNegative(formattedValue) && this.currencyFormat.parse(formattedValue) !== 0) {\n                formattedValue = formattedValue.replace(this.currencyFormat.prefix, this.currencyFormat.negativePrefix);\n            }\n            if (this.minValue >= 0) {\n                formattedValue = formattedValue.replace(this.currencyFormat.negativePrefix, this.currencyFormat.prefix);\n            }\n            if (this.options.currencyDisplay === CurrencyDisplay.hidden || (this.focus && this.options.hideCurrencySymbolOnFocus)) {\n                formattedValue = formattedValue\n                    .replace(this.currencyFormat.negativePrefix, this.currencyFormat.minusSign !== undefined ? this.currencyFormat.minusSign : '(')\n                    .replace(this.currencyFormat.negativeSuffix, this.currencyFormat.minusSign !== undefined ? '' : ')')\n                    .replace(this.currencyFormat.prefix, '')\n                    .replace(this.currencyFormat.suffix, '');\n            }\n            this.el.value = formattedValue;\n            this.numberValue = this.currencyFormat.parse(formattedValue);\n        }\n        else {\n            this.el.value = '';\n            this.numberValue = null;\n        }\n        this.formattedValue = this.el.value;\n        this.onInput(this.getValue());\n    }\n    addEventListener() {\n        this.el.addEventListener('input', (e) => {\n            const { value, selectionStart } = this.el;\n            const inputEvent = e;\n            if (selectionStart && inputEvent.data && DECIMAL_SEPARATORS.includes(inputEvent.data)) {\n                this.decimalSymbolInsertedAt = selectionStart - 1;\n            }\n            this.format(value);\n            if (this.focus && selectionStart != null) {\n                const getCaretPositionAfterFormat = () => {\n                    const { prefix, suffix, decimalSymbol, maximumFractionDigits, groupingSymbol } = this.currencyFormat;\n                    let caretPositionFromLeft = value.length - selectionStart;\n                    const newValueLength = this.formattedValue.length;\n                    if (this.currencyFormat.minusSign === undefined && (value.startsWith('(') || value.startsWith('-')) && !value.endsWith(')')) {\n                        return newValueLength - this.currencyFormat.negativeSuffix.length > 1 ? this.formattedValue.substring(selectionStart).length : 1;\n                    }\n                    if (this.formattedValue.substring(selectionStart, 1) === groupingSymbol &&\n                        count(this.formattedValue, groupingSymbol) === count(value, groupingSymbol) + 1) {\n                        return newValueLength - caretPositionFromLeft - 1;\n                    }\n                    if (newValueLength < caretPositionFromLeft) {\n                        return selectionStart;\n                    }\n                    if (decimalSymbol !== undefined && value.indexOf(decimalSymbol) !== -1) {\n                        const decimalSymbolPosition = value.indexOf(decimalSymbol) + 1;\n                        if (Math.abs(newValueLength - value.length) > 1 && selectionStart <= decimalSymbolPosition) {\n                            return this.formattedValue.indexOf(decimalSymbol) + 1;\n                        }\n                        else {\n                            if (!this.options.autoDecimalDigits && selectionStart > decimalSymbolPosition) {\n                                if (this.currencyFormat.onlyDigits(value.substring(decimalSymbolPosition)).length - 1 === maximumFractionDigits) {\n                                    caretPositionFromLeft -= 1;\n                                }\n                            }\n                        }\n                    }\n                    return this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden\n                        ? newValueLength - caretPositionFromLeft\n                        : Math.max(newValueLength - Math.max(caretPositionFromLeft, suffix.length), prefix.length);\n                };\n                this.setCaretPosition(getCaretPositionAfterFormat());\n            }\n        });\n        this.el.addEventListener('focus', () => {\n            this.focus = true;\n            this.numberValueOnFocus = this.numberValue;\n            setTimeout(() => {\n                const { value, selectionStart, selectionEnd } = this.el;\n                this.format(value, this.options.hideNegligibleDecimalDigitsOnFocus);\n                if (selectionStart != null && selectionEnd != null && Math.abs(selectionStart - selectionEnd) > 0) {\n                    this.setCaretPosition(0, this.el.value.length);\n                }\n                else if (selectionStart != null) {\n                    const caretPositionOnFocus = this.getCaretPositionOnFocus(value, selectionStart);\n                    this.setCaretPosition(caretPositionOnFocus);\n                }\n            });\n        });\n        this.el.addEventListener('blur', () => {\n            this.focus = false;\n            this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\n            if (this.numberValueOnFocus !== this.numberValue) {\n                this.onChange(this.getValue());\n            }\n        });\n    }\n    getCaretPositionOnFocus(value, selectionStart) {\n        if (this.numberValue == null) {\n            return selectionStart;\n        }\n        const { prefix, negativePrefix, suffix, negativeSuffix, groupingSymbol, currency } = this.currencyFormat;\n        const isNegative = this.numberValue < 0;\n        const currentPrefix = isNegative ? negativePrefix : prefix;\n        const prefixLength = currentPrefix.length;\n        if (this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden) {\n            if (isNegative) {\n                if (selectionStart <= 1) {\n                    return 1;\n                }\n                else if (value.endsWith(')') && selectionStart > value.indexOf(')')) {\n                    return this.formattedValue.length - 1;\n                }\n            }\n        }\n        else {\n            const suffixLength = isNegative ? negativeSuffix.length : suffix.length;\n            if (selectionStart >= value.length - suffixLength) {\n                return this.formattedValue.length - suffixLength;\n            }\n            else if (selectionStart < prefixLength) {\n                return prefixLength;\n            }\n        }\n        let result = selectionStart;\n        if (this.options.hideCurrencySymbolOnFocus &&\n            this.options.currencyDisplay !== CurrencyDisplay.hidden &&\n            selectionStart >= prefixLength &&\n            currency !== undefined &&\n            currentPrefix.includes(currency)) {\n            result -= prefixLength;\n            if (isNegative) {\n                result += 1;\n            }\n        }\n        if (this.options.hideGroupingSeparatorOnFocus && groupingSymbol !== undefined) {\n            result -= count(value.substring(0, selectionStart), groupingSymbol);\n        }\n        return result;\n    }\n    setCaretPosition(start, end = start) {\n        this.el.setSelectionRange(start, end);\n    }\n}\n\nconst findInput = (el) => ((el === null || el === void 0 ? void 0 : el.matches('input')) ? el : el === null || el === void 0 ? void 0 : el.querySelector('input'));\nfunction useCurrencyInput(options, autoEmit) {\n    var _a, _b, _c, _d;\n    let currencyInput;\n    const inputRef = ref(null);\n    const formattedValue = ref(null);\n    const numberValue = ref(null);\n    const vm = getCurrentInstance();\n    const emit = (vm === null || vm === void 0 ? void 0 : vm.emit) || ((_b = (_a = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _a === void 0 ? void 0 : _a.$emit) === null || _b === void 0 ? void 0 : _b.bind(vm === null || vm === void 0 ? void 0 : vm.proxy));\n    const props = ((vm === null || vm === void 0 ? void 0 : vm.props) || ((_c = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _c === void 0 ? void 0 : _c.$props));\n    const isVue3 = version.startsWith('3');\n    const lazyModel = isVue3 && ((_d = vm === null || vm === void 0 ? void 0 : vm.attrs.modelModifiers) === null || _d === void 0 ? void 0 : _d.lazy);\n    const modelValue = computed(() => props === null || props === void 0 ? void 0 : props[isVue3 ? 'modelValue' : 'value']);\n    const inputEvent = isVue3 ? 'update:modelValue' : 'input';\n    const changeEvent = lazyModel ? 'update:modelValue' : 'change';\n    watch(inputRef, (value) => {\n        var _a;\n        if (value) {\n            const el = findInput((_a = value === null || value === void 0 ? void 0 : value.$el) !== null && _a !== void 0 ? _a : value);\n            if (el) {\n                currencyInput = new CurrencyInput({\n                    el,\n                    options,\n                    onInput: (value) => {\n                        if (!lazyModel && autoEmit !== false && modelValue.value !== value.number) {\n                            emit === null || emit === void 0 ? void 0 : emit(inputEvent, value.number);\n                        }\n                        numberValue.value = value.number;\n                        formattedValue.value = value.formatted;\n                    },\n                    onChange: (value) => {\n                        if (autoEmit !== false) {\n                            emit === null || emit === void 0 ? void 0 : emit(changeEvent, value.number);\n                        }\n                    }\n                });\n                currencyInput.setValue(modelValue.value);\n            }\n            else {\n                console.error('No input element found. Please make sure that the \"inputRef\" template ref is properly assigned.');\n            }\n        }\n        else {\n            currencyInput = null;\n        }\n    });\n    return {\n        inputRef,\n        numberValue,\n        formattedValue,\n        setValue: (value) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setValue(value),\n        setOptions: (options) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setOptions(options)\n    };\n}\n\nexport { CurrencyDisplay, ValueScaling, useCurrencyInput };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}